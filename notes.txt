"There was an idea called something unimportant. The idea was to bring together
a group of remarkable people (read: 2 remarkable people and an absolute
amateur), see if they could become something more. See if they could work
together when they felt like it to make some really shiny things."
-[redacted] probably

Project Carbon is a plan to investigate and develop a system for locally
controlled RGB LEDs for the eventual purpose of producing a real version
of Joy's mask from Payday 2. In the long term this project aims to develop a
project-agnostic system for controlling RGB LEDs suitable for any number of
purposes

Goals of Carbon:
  Create a script/device image which runs on a raspberry pi zero w
    This hardware was selected based on wireless capability and size
      wireless for reasons detailed below

      size as Carbon is meant to be implementable in a variety of form factors
      the chip is small, making mounting trivial

  Enable the device to act as a local access point while also running
  a set of lights

  Enable the device to respond, likely via http requests, to remote control
  via the aforementioned access point
    if using http requests, flask seems like a good way to receive requests

    for initial testing, perhaps have a set of pregenerated patterns that the
    user can select from via requests
      e.g "red" for red, etc.

  Enable the remote user to adjust the color of lights

Stretch goals
  Create an android app to allow easy mobile configuration of lights

  Create a pattern editor (in the app) to allow for easy configuration


Would it be necessary to break the app into a flask server parsing commands
and a script running the light control?

processid of currently running script can be found using os.getpid()

can restart script using a bash script that kills the process then calls
the script again
/src/undead contains an implementation of this concept that would be suitable
for rebooting the server

python requires root to access gpio

the neopixel library should do an excellent job for rendering patterns,
with auto_update (in the actual neopixel object) disabled it will only
update when asked

12/18/18
okaaaaaaaay.... how do I api?

frame:
/restart - restart the python server to apply code changes [post, 0 param]
/off - turns all lights on the assigned strip off [post, 0 param]
/single/off - turns off only the specific light [post, 1 param]
/single/name - parse the given text color and set the given light [post, 2 param]
/single/rgb - set the rgb values for a given light [post, 4 param]
/all/name - parse the given text color and set every light [post, 1 param]
/all/rgb - set the rgb values for every light [post, 3 param]
/status/all - get the status of every light [get, 0 param]
/status/single - get the status of a single light [get, 1 param]

/range/* - would this be useful or would the speed of single make it redundant?
  may be the case that the speed of the pi iterating through each value
  is faster than setting the values individually


Statuses
restart - done, implemented for test but not using post
off - done, implemented for test but not using post
single/off - working, needs error checking
single/name - working, needs error checking
single/rgb - working, needs proper error messages
all/name - working, needs proper error messages and the response codes are
likely really screwed
all/rgb - working, needs error messages and general tlc

status/all -
status/single -